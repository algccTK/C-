using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;

using System.Collections.ObjectModel;//ObservableCollectioné¡ž
using System.Data;
using System.Windows.Controls.Primitives;

namespace _004_WPF_Practice6
{
    /// <summary>
    /// Interaction logic for Window7.xaml
    /// </summary>
    public partial class Window7 : Window
    {
        private ObservableCollection<Num> nums { get; set; }
        public Window7()
        {
            InitializeComponent();

            Num a = new Num() { R1 = 6 };
            Num b = new Num() { R1 = 1 };
            Num c = new Num() { R1 = 1 };
            Num d = new Num() { R1 = 6 };
            Num e = new Num() { R1 = 1 };

            nums = new ObservableCollection<Num>();
            nums.Add(a);
            nums.Add(b);
            nums.Add(c);
            nums.Add(d);
            nums.Add(e);

            dataGrid1.ItemsSource = nums;




            
        }

        private void button1_Click(object sender, RoutedEventArgs e)
        {
            List<int> targetR = new List<int>();
            targetR.Add(int.Parse(R1_textBox1.Text));
            //targetR.Add(int.Parse(R2_textBox1.Text));
            //targetR.Add(int.Parse(R3_textBox1.Text));
            //targetR.Add(int.Parse(R4_textBox1.Text));
            //targetR.Add(int.Parse(R5_textBox1.Text));
            //targetR.Add(int.Parse(R6_textBox1.Text));

            for (int i = 0; i < dataGrid1.Items.Count; i++)
            {
                int countR = 0, countB=0;
                Num kak = dataGrid1.Items[i] as Num;
                if (kak == null) break;

                int RN = 0;
                for (int j = 0; j < 6; j++)
                {
                    if (j == 0) RN = kak.R1;
                    else if (j == 1) RN = kak.R2;
                    else if (j == 2) RN = kak.R3;
                    else if (j == 3) RN = kak.R4;
                    else if (j == 4) RN = kak.R5;
                    else if (j == 5) RN = kak.R6;
                    if (targetR.Contains(RN))
                    {
                        DataGridRow row = (DataGridRow)this.dataGrid1.ItemContainerGenerator.ContainerFromIndex(i);

                        DataGridCellsPresenter presenter = GetVisualChild<DataGridCellsPresenter>(row);
                        DataGridCell cell = (DataGridCell)presenter.ItemContainerGenerator.ContainerFromIndex(j);
                        cell.Background = new SolidColorBrush(Colors.Red);
                        countR++;
                    }
                }
                if (kak.B1==int.Parse(B1_textBox1.Text))
                {
                    DataGridRow row = (DataGridRow)this.dataGrid1.ItemContainerGenerator.ContainerFromIndex(i);

                    DataGridCellsPresenter presenter = GetVisualChild<DataGridCellsPresenter>(row);
                    DataGridCell cell = (DataGridCell)presenter.ItemContainerGenerator.ContainerFromIndex(6);
                    cell.Background = new SolidColorBrush(Colors.Red);
                    countB = 1;
                }
                kak.result = countR.ToString() + "+" + countB.ToString();

            }
            dataGrid1.ItemsSource = nums;
        }

        public static T GetVisualChild<T>(Visual parent) where T : Visual
        {
            T childContent = default(T);
            int numVisuals = VisualTreeHelper.GetChildrenCount(parent);
            for (int i = 0; i < numVisuals; i++)
            {
                Visual v = (Visual)VisualTreeHelper.GetChild(parent, i);
                childContent = v as T;
                if (childContent == null)
                {
                    childContent = GetVisualChild<T>(v);
                }
                if (childContent != null)
                {
                    break;
                }
            }

            return childContent;
        }
    }

    public class Num
    {
        public int R1 { get; set; }
        public int R2 { get; set; }
        public int R3 { get; set; }
        public int R4 { get; set; }
        public int R5 { get; set; }
        public int R6 { get; set; }
        public int B1 { get; set; }
        public string result { get; set; }
    }
}
